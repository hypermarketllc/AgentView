version: '3.8'

services:
  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: crm-db
    restart: always
    environment:
      POSTGRES_DB: crm_db
      POSTGRES_USER: crm_user
      POSTGRES_PASSWORD: your_strong_password_here
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount initialization scripts
      - ./sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crm_user -d crm_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crm-network

  # Application with error logging and console
  app:
    build:
      context: ..
      dockerfile: Console_Release_Complete_Package/Dockerfile.error-logging
    container_name: crm-app-with-error-logging
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      ERROR_LOGGING_ENABLED: 'true'
      DOCKER_ENV: 'true'
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: crm_db
      POSTGRES_USER: crm_user
      POSTGRES_PASSWORD: your_strong_password_here
      PORT: 3000
      JWT_SECRET: your_jwt_secret_here
      CONSOLE_ENABLED: 'true'
      PATCH_AUTO_RUN: 'true'
    volumes:
      - ./logs:/app/logs
      - ../public:/app/public
    ports:
      - "3000:3000"
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    container_name: crm-pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - crm-network

volumes:
  postgres_data:

networks:
  crm-network:
    driver: bridge
